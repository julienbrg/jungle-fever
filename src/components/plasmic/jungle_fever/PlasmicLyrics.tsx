// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: neKnaqAFQgtkJjtbXthdKd
// Component: Id1pWwT1rv
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: -5kvBjMJU6nse/component
import Footer from "../../Footer"; // plasmic-import: LYimf7BcZyc4G/component

import { useScreenVariants as useScreenVariantsw2FpJ6DWBvL } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: W2fpJ_6d-WBvL/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_jungle_fever.module.css"; // plasmic-import: neKnaqAFQgtkJjtbXthdKd/projectcss
import sty from "./PlasmicLyrics.module.css"; // plasmic-import: Id1pWwT1rv/css

export type PlasmicLyrics__VariantMembers = {};

export type PlasmicLyrics__VariantsArgs = {};
type VariantPropType = keyof PlasmicLyrics__VariantsArgs;
export const PlasmicLyrics__VariantProps = new Array<VariantPropType>();

export type PlasmicLyrics__ArgsType = {};
type ArgPropType = keyof PlasmicLyrics__ArgsType;
export const PlasmicLyrics__ArgProps = new Array<ArgPropType>();

export type PlasmicLyrics__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  freeBox?: p.Flex<"div">;
  section?: p.Flex<"section">;
  text?: p.Flex<"div">;
  link?: p.Flex<"a">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultLyricsProps {
  className?: string;
}

function PlasmicLyrics__RenderFunc(props: {
  variants: PlasmicLyrics__VariantsArgs;
  args: PlasmicLyrics__ArgsType;
  overrides: PlasmicLyrics__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsw2FpJ6DWBvL()
  });

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          {true ? (
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <p.Stack
                as={"section"}
                data-plasmic-name={"section"}
                data-plasmic-override={overrides.section}
                hasGap={true}
                className={classNames(projectcss.all, sty.section)}
              >
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  {
                    "I've got jungle fever, she's got jungle fever\nWe've got jungle fever, we're in love\nShe's gone black-boy crazy, I've gone white-girl hazy\nAin't no thinking maybe, we're in love\nShe's got jungle fever, I've got jungle fever\nWe've got jungle fever, we're in love\nI've gone white-girl crazy, she's gone black-boy hazy\nWe're each other's baby, we're in love\nI've got jungle fever, she's got jungle fever\nWe've got jungle fever, we're in love\nShe's gone black-boy crazy, I've gone white-girl hazy\nAin't no thinking maybe, we're in love\nShe can't love me, I can't love her\n'Cause they say we're the wrong color\nStaring, gloating, laughing, looking\nLike we've done something wrong\nBecause we show love strong, get real, come on\nCalling us names too bad to mention\nBut we pay them no attention\nFor color blind are inner feelings\nIf we feel happiness\nAnd know our love's the best, forget their mess\nI've got jungle fever, she's got jungle fever\nWe've got jungle fever, we're in love\nShe's gone black-boy crazy, I've gone white-girl hazy\nAin't no thinking maybe, we're in love\nShe's got jungle fever, I've got jungle fever\nWe've got jungle fever, we're in love\nI've gone white-girl crazy, she's gone black-boy hazy\nWe're each other's baby, we're in love\nEveryone's created equal\nHell with all you ignorant people\nTrying to stereo type us\nYou really ought to quit\n'Cause you don't know jack, you make us sick\nGet off my jock, you're trying to ride me\nBecause I got my girl beside me\nYou'll only make yourself look stupid\nI love you're trying to dis\n'Cause we've got happiness, I bet you're pissed\nI've got jungle fever, she's got jungle fever\nWe've got jungle fever, we're in love\nShe's gone black-boy crazy, I've gone white-girl hazy\nAin't no thinking maybe, we're in love\nShe's got jungle fever, I've got jungle fever\nWe've got jungle fever, we're in love\nI've gone white-girl crazy, she's gone black-boy hazy\nWe're each other's baby, we're in love\nI've got jungle fever, she's got jungle fever\nWe've got jungle fever, we're in love\nShe's gone black-boy crazy, I've gone white-girl hazy\nAin't no thinking maybe, we're in love\nShe's got jungle fever, I've got jungle fever\nWe've got jungle fever, we're in love\nI've gone white-girl crazy, she's gone black-boy hazy\nWe're each other's baby, we're in love\n"
                  }
                </div>

                <a
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link
                  )}
                  href={
                    "https://open.spotify.com/track/2SW1wqAFlWH6kGaG3lWtfI?si=539df40300964d85" as const
                  }
                  target={"_blank" as const}
                >
                  {"Stevie Wonder, Jungle Fever, 1991"}
                </a>
              </p.Stack>
            </div>
          ) : null}

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "freeBox", "section", "text", "link", "footer"],
  header: ["header"],
  freeBox: ["freeBox", "section", "text", "link"],
  section: ["section", "text", "link"],
  text: ["text"],
  link: ["link"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  freeBox: "div";
  section: "section";
  text: "div";
  link: "a";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLyrics__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLyrics__VariantsArgs;
    args?: PlasmicLyrics__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLyrics__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLyrics__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLyrics__ArgProps,
          internalVariantPropNames: PlasmicLyrics__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicLyrics__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLyrics";
  } else {
    func.displayName = `PlasmicLyrics.${nodeName}`;
  }
  return func;
}

export const PlasmicLyrics = Object.assign(
  // Top-level PlasmicLyrics renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    freeBox: makeNodeComponent("freeBox"),
    section: makeNodeComponent("section"),
    text: makeNodeComponent("text"),
    link: makeNodeComponent("link"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicLyrics
    internalVariantProps: PlasmicLyrics__VariantProps,
    internalArgProps: PlasmicLyrics__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLyrics;
/* prettier-ignore-end */

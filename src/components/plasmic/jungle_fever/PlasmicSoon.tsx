// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: neKnaqAFQgtkJjtbXthdKd
// Component: ODTH0GNSW1H
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: -5kvBjMJU6nse/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import Button from "../../Button"; // plasmic-import: TmMHvKz8624iV/component
import Footer from "../../Footer"; // plasmic-import: LYimf7BcZyc4G/component

import { useScreenVariants as useScreenVariantsw2FpJ6DWBvL } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: W2fpJ_6d-WBvL/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_jungle_fever.module.css"; // plasmic-import: neKnaqAFQgtkJjtbXthdKd/projectcss
import sty from "./PlasmicSoon.module.css"; // plasmic-import: ODTH0GNSW1H/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: QIFkDJ_ce_gClo/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: wIv3yetKUg72by/icon

export type PlasmicSoon__VariantMembers = {};

export type PlasmicSoon__VariantsArgs = {};
type VariantPropType = keyof PlasmicSoon__VariantsArgs;
export const PlasmicSoon__VariantProps = new Array<VariantPropType>();

export type PlasmicSoon__ArgsType = {};
type ArgPropType = keyof PlasmicSoon__ArgsType;
export const PlasmicSoon__ArgProps = new Array<ArgPropType>();

export type PlasmicSoon__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  textBox2?: p.Flex<"div">;
  section?: p.Flex<"section">;
  textBox?: p.Flex<"div">;
  play?: p.Flex<typeof Button>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultSoonProps {
  className?: string;
}

function PlasmicSoon__RenderFunc(props: {
  variants: PlasmicSoon__VariantsArgs;
  args: PlasmicSoon__ArgsType;
  overrides: PlasmicSoon__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsw2FpJ6DWBvL()
  });

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <Reveal
            className={classNames("__wab_instance", sty.reveal___5LJi)}
            delay={500 as const}
            duration={5000 as const}
            triggerOnce={true}
          >
            <div className={classNames(projectcss.all, sty.freeBox___8OdRt)}>
              <div
                data-plasmic-name={"textBox2"}
                data-plasmic-override={overrides.textBox2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.textBox2
                )}
              >
                {hasVariant(globalVariants, "screen", "mobile")
                  ? "Coming soon"
                  : (() => {
                      try {
                        return undefined;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return "Coming soon..";
                        }
                        throw e;
                      }
                    })()}
              </div>
            </div>
          </Reveal>

          {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
            <div className={classNames(projectcss.all, sty.freeBox___2ZNPe)}>
              <p.Stack
                as={"section"}
                data-plasmic-name={"section"}
                data-plasmic-override={overrides.section}
                hasGap={true}
                className={classNames(projectcss.all, sty.section)}
              >
                <Reveal
                  className={classNames("__wab_instance", sty.reveal___9NJlX)}
                  delay={500 as const}
                  duration={5000 as const}
                  triggerOnce={true}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__pbsFn)}
                  >
                    <div
                      data-plasmic-name={"textBox"}
                      data-plasmic-override={overrides.textBox}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.textBox
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobile")
                        ? "Coming soon.."
                        : "Coming soon"}
                    </div>
                  </div>
                </Reveal>

                <Reveal
                  className={classNames("__wab_instance", sty.reveal__wdvDe)}
                  delay={6000 as const}
                  direction={"vertical" as const}
                  duration={1500 as const}
                  effect={"fade" as const}
                  triggerOnce={true}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobile") ? true : true
                  ) ? (
                    <Button
                      data-plasmic-name={"play"}
                      data-plasmic-override={overrides.play}
                      className={classNames("__wab_instance", sty.play)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6Ec8U
                        )}
                      >
                        {"Watch"}
                      </div>
                    </Button>
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lXmJs
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobile") ? (
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <a
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.link__hn7Iw
                            )}
                            href={
                              "https://foundation.app/collection/mholefnc" as const
                            }
                            target={"_blank" as const}
                          >
                            {hasVariant(globalVariants, "screen", "mobile")
                              ? "Foundation"
                              : "Foundation"}
                          </a>
                        }
                        <React.Fragment>{"\n"}</React.Fragment>
                        {
                          <a
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.link__qhJw
                            )}
                            href={
                              "https://opensea.io/collection/music-hole-ai-jungle-fever-fnc" as const
                            }
                            target={"_blank" as const}
                          >
                            {hasVariant(globalVariants, "screen", "mobile")
                              ? "OpenSea"
                              : "OpenSea"}
                          </a>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <a
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.link__hn7Iw
                            )}
                            href={
                              "https://foundation.app/collection/mholefnc" as const
                            }
                            target={"_blank" as const}
                          >
                            {hasVariant(globalVariants, "screen", "mobile")
                              ? "Foundation"
                              : "Foundation"}
                          </a>
                        }
                        <React.Fragment>{" | "}</React.Fragment>
                        {
                          <a
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.link__qhJw
                            )}
                            href={
                              "https://opensea.io/collection/music-hole-ai-jungle-fever-fnc" as const
                            }
                            target={"_blank" as const}
                          >
                            {hasVariant(globalVariants, "screen", "mobile")
                              ? "OpenSea"
                              : "OpenSea"}
                          </a>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    )}
                  </div>
                </Reveal>
              </p.Stack>
            </div>
          ) : null}

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "textBox2", "section", "textBox", "play", "footer"],
  header: ["header"],
  textBox2: ["textBox2"],
  section: ["section", "textBox", "play"],
  textBox: ["textBox"],
  play: ["play"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  textBox2: "div";
  section: "section";
  textBox: "div";
  play: typeof Button;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSoon__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSoon__VariantsArgs;
    args?: PlasmicSoon__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSoon__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSoon__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSoon__ArgProps,
          internalVariantPropNames: PlasmicSoon__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicSoon__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSoon";
  } else {
    func.displayName = `PlasmicSoon.${nodeName}`;
  }
  return func;
}

export const PlasmicSoon = Object.assign(
  // Top-level PlasmicSoon renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    textBox2: makeNodeComponent("textBox2"),
    section: makeNodeComponent("section"),
    textBox: makeNodeComponent("textBox"),
    play: makeNodeComponent("play"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicSoon
    internalVariantProps: PlasmicSoon__VariantProps,
    internalArgProps: PlasmicSoon__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSoon;
/* prettier-ignore-end */

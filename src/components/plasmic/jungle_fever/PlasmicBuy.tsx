// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: neKnaqAFQgtkJjtbXthdKd
// Component: XTZgJz7paK
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: TmMHvKz8624iV/component

import { useScreenVariants as useScreenVariantsw2FpJ6DWBvL } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: W2fpJ_6d-WBvL/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_jungle_fever.module.css"; // plasmic-import: neKnaqAFQgtkJjtbXthdKd/projectcss
import sty from "./PlasmicBuy.module.css"; // plasmic-import: XTZgJz7paK/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: QIFkDJ_ce_gClo/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: wIv3yetKUg72by/icon
import musicHolejpegXXl4WHnk from "./images/musicHolejpeg.jpeg"; // plasmic-import: xXl-4wHnk/picture

export type PlasmicBuy__VariantMembers = {};

export type PlasmicBuy__VariantsArgs = {};
type VariantPropType = keyof PlasmicBuy__VariantsArgs;
export const PlasmicBuy__VariantProps = new Array<VariantPropType>();

export type PlasmicBuy__ArgsType = {};
type ArgPropType = keyof PlasmicBuy__ArgsType;
export const PlasmicBuy__ArgProps = new Array<ArgPropType>();

export type PlasmicBuy__OverridesType = {
  root?: p.Flex<"div">;
  buyBox?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  msgBox?: p.Flex<"div">;
  buyButton?: p.Flex<typeof Button>;
  freeBox?: p.Flex<"div">;
};

export interface DefaultBuyProps {
  className?: string;
}

function PlasmicBuy__RenderFunc(props: {
  variants: PlasmicBuy__VariantsArgs;
  args: PlasmicBuy__ArgsType;
  overrides: PlasmicBuy__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsw2FpJ6DWBvL()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <div
          data-plasmic-name={"buyBox"}
          data-plasmic-override={overrides.buyBox}
          className={classNames(projectcss.all, sty.buyBox)}
        >
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={
              hasVariant(globalVariants, "screen", "mobile")
                ? ("100%" as const)
                : ("60%" as const)
            }
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"lazy" as const}
            src={{
              src: musicHolejpegXXl4WHnk,
              fullWidth: 1198,
              fullHeight: 1600,
              aspectRatio: undefined
            }}
          />

          {true ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ww6D3
              )}
            >
              {hasVariant(globalVariants, "screen", "mobile")
                ? "Storyline: Francis, a little accountant officiating in a shady cabaret has marital concerns with his wife. After a violent argument, he wakes up to discover a surprise. It's the macabre and zany starting point of a burlesque thriller.\n\nDirected by Gaetan Liekens & David Mutzenmacher\n\nStarring Vanessa Guide, Wim Willaert & Laurent Regairaz\n\nProduced by Rockstone Films. Luc Besson, Elgolive & Swisskiss\n\nThe design is the original lithography from Music Hole's unique poster. The NFT gives the owner the right to watch the film Music Hole on https://junglefever.io and future metaverse cinemas owned by Jungle Fever.\n"
                : "Storyline: Francis, a little accountant officiating in a shady cabaret has marital concerns with his wife. After a violent argument, he wakes up to discover a surprise. It's the macabre and zany starting point of a burlesque thriller.\n\nDirected by Gaetan Liekens & David Mutzenmacher\n\nStarring Vanessa Guide, Wim Willaert & Laurent Regairaz\n\nProduced by Rockstone Films. Luc Besson, Elgolive & Swisskiss\n\nThe design is the original lithography from Music Hole's unique poster.\n\nThe NFT gives the owner the right to watch the film Music Hole on https://junglefever.io and future metaverse cinemas owned by Jungle Fever.\n"}
            </div>
          ) : null}
          {true ? (
            <div
              data-plasmic-name={"msgBox"}
              data-plasmic-override={overrides.msgBox}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.msgBox
              )}
            >
              {"msgBox"}
            </div>
          ) : null}
          {true ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__umAJ
              )}
            >
              {"Price: 0.0042 ETH"}
            </div>
          ) : null}

          <Button
            data-plasmic-name={"buyButton"}
            data-plasmic-override={overrides.buyButton}
            className={classNames("__wab_instance", sty.buyButton)}
          >
            {"Buy the NFT"}
          </Button>

          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          />
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___29Uqs
          )}
        >
          {"421px"}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "buyBox", "img", "msgBox", "buyButton", "freeBox"],
  buyBox: ["buyBox", "img", "msgBox", "buyButton", "freeBox"],
  img: ["img"],
  msgBox: ["msgBox"],
  buyButton: ["buyButton"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  buyBox: "div";
  img: typeof p.PlasmicImg;
  msgBox: "div";
  buyButton: typeof Button;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBuy__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBuy__VariantsArgs;
    args?: PlasmicBuy__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBuy__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBuy__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBuy__ArgProps,
          internalVariantPropNames: PlasmicBuy__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicBuy__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBuy";
  } else {
    func.displayName = `PlasmicBuy.${nodeName}`;
  }
  return func;
}

export const PlasmicBuy = Object.assign(
  // Top-level PlasmicBuy renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    buyBox: makeNodeComponent("buyBox"),
    img: makeNodeComponent("img"),
    msgBox: makeNodeComponent("msgBox"),
    buyButton: makeNodeComponent("buyButton"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicBuy
    internalVariantProps: PlasmicBuy__VariantProps,
    internalArgProps: PlasmicBuy__ArgProps
  }
);

export default PlasmicBuy;
/* prettier-ignore-end */
